@using WebLab2.HelperMethods
@using WebLab2.Services
@inject NavigationManager Navigation
@inject HttpClient Http

<MudNavMenu>
    @if (!isAuthenticated)
    {
        <GuestNavbar />
    }
    else if (isAdmin)
    {
        <AdminNavbar />
    }
    else
    {
        <UserNavbar />
    }
</MudNavMenu>

@code
{
    [Inject] private AuthHelper AuthHelper { get; set; }

    private bool isAdmin = false;
    private bool isAuthenticated = false;

    private void HandleAuthenticationStateChanged()
    {
        CheckUser();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthHelper.OnAuthenticationStateChanged += HandleAuthenticationStateChanged;
            await CheckUser();
        }
    }

    public async Task CheckUser()
    {
        var token = await AuthHelper.GetAccessTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"{Navigation.BaseUri}api/auth/authorize");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                isAuthenticated = true;
                isAdmin = await AuthHelper.IsUserAdminAsync();
            }
        }
        else
        {
            isAuthenticated = false;
            isAdmin = false;
        }

        StateHasChanged();
    }
}