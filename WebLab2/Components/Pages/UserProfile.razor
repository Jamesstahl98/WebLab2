@page "/profile"
@using WebLab2.HelperMethods
@using WebLab2.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<MudPaper Class="pa-4">
    <MudForm>
        <MudTextField @bind-Value="user.Username" Label="Username" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.FirstName" Label="First Name" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.LastName" Label="Last Name" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.Email" Label="Email" Type="email" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.PhoneNumber" Label="Phone Number" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.Country" Label="Country" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.City" Label="City" Required="true" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="user.Address" Label="Address" Required="true" Variant="Variant.Outlined" />

        <MudTextField @bind-Value="user.NewPassword" Label="New Password (Leave blank to keep current password)" Variant="Variant.Outlined"
        InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
        OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" />

        <MudTextField @bind-Value="user.CurrentPassword" Label="Current Password" Variant="Variant.Outlined"
        InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
        OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password" Required="true"
        Class="mt-5"/>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Save Changes</MudButton>
    </MudForm>

    @if (isSuccess)
    {
        <MudAlert Severity="Severity.Success">Profile updated successfully!</MudAlert>
    }
    @if (isError)
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }
</MudPaper>

@code {
    [Inject] private AuthHelper AuthHelper { get; set; }

    private UpdateUserDto user = new UpdateUserDto();
    private bool isSuccess = false;
    private bool isError = false;
    private bool isAuthenticated = false;
    private string errorMessage;

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool userValidated = await ValidateUser();

            if(userValidated)
            {
                isAuthenticated = true;
            }
            else
            {
                isAuthenticated = false;
            }

            StateHasChanged();
        }
    }

    private async Task<bool> ValidateUser()
    {
        var token = await AuthHelper.GetAccessTokenAsync();

        if (!string.IsNullOrEmpty(token))
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"{Navigation.BaseUri}api/user/get-profile");
            requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<UpdateUserDto>();
                return true;
            }
            else
            {
                isError = true;
                errorMessage = "Failed to fetch user profile. Please log in.";
                return false;
            }
        }
        else
        {
            isError = true;
            errorMessage = "Unauthorized access. No token found.";
            return false;
        }
    }

    private async Task SaveChanges()
    {
        var token = await AuthHelper.GetAccessTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            isError = true;
            errorMessage = "You must be logged in to update your profile.";
            return;
        }

        var requestMessage = new HttpRequestMessage(HttpMethod.Put, $"{Navigation.BaseUri}api/user/update-profile")
            {
                Content = JsonContent.Create(user)
            };
        requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            isError = false;
        }
        else
        {
            isError = true;
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }

    private void ShowPassword()
    {
        if (PasswordInput == InputType.Password)
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
}