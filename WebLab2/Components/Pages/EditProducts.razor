@page "/edit-products"
@using WebLab2.Components.Dialogs
@using WebLab2.HelperMethods
@using WebLab2.Models
@using WebLab2.Services
@using static WebLab2.Enums.ProductStatusEnum
@inject HttpClient Http
@inject IDialogService DialogService
@inject NavigationManager Navigation

<PageTitle>Add Product</PageTitle>

<MudPaper Class="pa-4">
    @if(isAdmin)
    {
        //PRODUCT LIST
        <MudCardHeader Style="font-size: 2.5rem">Products</MudCardHeader>
        <MudTable Items="@products" Striped="true" Hover="true">
            <HeaderContent>
                <MudTh>Product Name</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Category</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product Name">@context.Name</MudTd>
                <MudTd DataLabel="Price">@context.Price.ToString("C")</MudTd>

                <MudTd DataLabel="Category">
                    @GetCategoryName(@context.CategoryId)
                </MudTd>
                <MudTd DataLabel="Status">@context.CategoryId.ToString()</MudTd>
                <MudButton Color="Color.Secondary" OnClick="@(() => OpenEditProduct(context))">
                    Edit
                </MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => OpenDeleteProductDialog(context))">
                    Delete
                </MudButton>
            </RowTemplate>
        </MudTable>
        <MudButton Class="mb-5" Color="Color.Primary" OnClick="OpenAddProductDialog">Add Product</MudButton>

        <MudDivider/>

        //CATEGORY LIST
        <MudCardHeader Style="font-size: 2.5rem">Categories</MudCardHeader>
        <MudTable Items="@categories" Striped="true" Hover="true">
            <HeaderContent>
                <MudTh>Category Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Category Name">@context.Name</MudTd>
                <MudButton Color="Color.Secondary" OnClick="@(() => OpenEditCategory(context))">
                    Edit
                </MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => OpenDeleteCategoryDialog(context))">
                    Delete
                </MudButton>
            </RowTemplate>
        </MudTable>
        <MudButton Color="Color.Primary" OnClick="OpenAddCategoryDialog">Add Category</MudButton>
    }
    else
    {
        <a href="/login">Login as an admin to add products.</a>
    }
</MudPaper>

@code {
    [Inject] private AuthHelper AuthHelper { get; set; }
    private bool isAdmin;

    private ProductDto newProduct = new ProductDto();
    private CategoryDto newCategory = new CategoryDto();
    private List<CategoryDto> categories = new List<CategoryDto>();
    private List<ProductDto> products = new List<ProductDto>();
    private ProductStatus selectedStatus;
    private int selectedCategoryId;

    private bool isSuccess = false;
    private bool isError = false;

    private bool isDataLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isDataLoaded)
        {
            isAdmin = await AuthHelper.IsUserAdminAsync();
            if (isAdmin)
            {
                await RefreshCategories();
                await RefreshProducts();
                StateHasChanged();
            }
            isDataLoaded = true;
        }
    }

    private string GetCategoryName(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.Id == categoryId);
        return category?.Name ?? "Unknown Category";
    }

    private async Task OpenEditProduct(ProductDto selectedProduct)
    {
        var parameters = new DialogParameters
        {
            { "product", selectedProduct },
            { "categories", categories }
        };

        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditProductDialog>("Edit Product", parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProducts();
            StateHasChanged();
        }
    }
    private async Task OpenEditCategory(CategoryDto selectedCategory)
    {
        var parameters = new DialogParameters
        {
            { "category", selectedCategory }
        };
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditCategoryDialog>("Edit Category", parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCategories();
            await RefreshProducts();
            StateHasChanged();
        }
    }

    private async Task OpenAddProductDialog()
    {
        var parameters = new DialogParameters();
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddProductDialog>("Add New Product", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProducts();
            StateHasChanged();
        }
    }

    private async Task OpenAddCategoryDialog()
    {
        var parameters = new DialogParameters();
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<AddCategoryDialog>("Add New Category", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshCategories();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteProductDialog(ProductDto product)
    {
        var parameters = new DialogParameters
        {
            { "product", product }
        };
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<DeleteProductDialog>("Delete Product", parameters, dialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProducts();
            StateHasChanged();
        }
    }

    private async Task OpenDeleteCategoryDialog(CategoryDto category)
    {
        var parameters = new DialogParameters
        {
            { "category", category }
        };
        var dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<DeleteCategoryDialog>("Delete Category", parameters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await RefreshCategories();
            await RefreshProducts();
            StateHasChanged();
        }
    }

    private async Task RefreshCategories()
    {
        var categoryResponse = await Http.GetFromJsonAsync<List<CategoryDto>>($"{Navigation.BaseUri}api/categories");
        if (categoryResponse != null)
        {
            categories = categoryResponse;
        }
    }
    private async Task RefreshProducts()
    {
        var productsResponse = await Http.GetFromJsonAsync<List<ProductDto>>($"{Navigation.BaseUri}api/products");
        if (productsResponse != null)
        {
            products = productsResponse;
        }
    }
}