@page "/protected"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Protected Page</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>

}

@code {
    private string Message = "";

    protected override async Task OnInitializedAsync()
    {
        var token = await GetAccessTokenAsync();

        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.GetAsync($"{Navigation.BaseUri}api/auth/admin-only");

        if (response.IsSuccessStatusCode)
        {
            Message = await response.Content.ReadAsStringAsync();
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }
    private async Task<string?> GetAccessTokenAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("getCookie", "AccessToken");
        return token;
    }
}
