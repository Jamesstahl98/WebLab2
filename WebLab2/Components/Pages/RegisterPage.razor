@page "/register"
@using WebLab2.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<EditForm EditContext="editContext" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    @if(isSuccess)
    {
        <MudAlert Severity="Severity.Success">User registred!</MudAlert>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
    }

    <div style="display: flex; flex-direction: column; gap: 1rem; max-width: 400px;">
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Username:</label>
            <InputText class="border" @bind-Value="registerModel.Username" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">First Name:</label>
            <InputText class="border" @bind-Value="registerModel.FirstName" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Last Name:</label>
            <InputText class="border" @bind-Value="registerModel.LastName" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Email:</label>
            <InputText class="border" @bind-Value="registerModel.Email" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Phone Number:</label>
            <InputText class="border" @bind-Value="registerModel.PhoneNumber" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Country:</label>
            <InputText class="border" @bind-Value="registerModel.Country" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">City:</label>
            <InputText class="border" @bind-Value="registerModel.City" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Address:</label>
            <InputText class="border" @bind-Value="registerModel.Address" style="flex: 1;" />
        </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Password:</label>
            <InputText class="border" @bind-Value="registerModel.Password" type="password" style="flex: 1;" />
        </div>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RegisterUser">Register</MudButton>
    </div>
</EditForm>

@code {
    private UserDto registerModel = new();
    private string errorMessage = "";
    private ValidationMessageStore messageStore;
    private EditContext editContext;

    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(registerModel);
        messageStore = new ValidationMessageStore(editContext);

        editContext.OnValidationStateChanged += (sender, eventArgs) =>
        {
            errorMessage = GetErrorMessage();
            StateHasChanged();
        };
    }

    private string GetErrorMessage()
    {
        var validationMessages = editContext.GetValidationMessages();
        return validationMessages.FirstOrDefault();
    }

    private async Task RegisterUser()
    {
        if (!editContext.Validate())
        {
            errorMessage = GetErrorMessage();
            return;
        }

        var response = await Http.PostAsJsonAsync($"{Navigation.BaseUri}api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            StateHasChanged();
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
        }
    }
}