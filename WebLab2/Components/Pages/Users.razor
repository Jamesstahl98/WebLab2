@page "/users"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using WebLab2.HelperMethods
@using WebLab2.Models

<PageTitle>Products</PageTitle>

@if(isAdmin)
{
    <MudTextField @bind-Value="searchInput" Label="Filter by email"/>
    <MudButton OnClick="SearchUserByEmail">Filter</MudButton>
    <MudTable Items="@searchResults" Striped="true" Hover="true">
        <HeaderContent>
            <MudTh>Username</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Phone Number</MudTh>
            <MudTh>Address</MudTh>
            <MudTh>Role</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Product Name">@context.Username</MudTd>
            <MudTd DataLabel="Name">@context.FirstName @context.LastName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
            <MudTd DataLabel="Address">@context.Country, @context.City, @context.Address</MudTd>
            <MudTd DataLabel="Role">@context.Role</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <a href="/login">Login as an admin to view users.</a>
}

@code {
    [Inject] private AuthHelper AuthHelper { get; set; }
    private bool isAdmin;
    private List<UserDto> allUsers = new List<UserDto>();
    private List<UserDto> searchResults = new List<UserDto>();
    private string? searchInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAdmin = await AuthHelper.IsUserAdminAsync();
            if (isAdmin)
            {
                var token = await AuthHelper.GetAccessTokenAsync();

                if (!string.IsNullOrEmpty(token))
                {
                    var requestMessage = new HttpRequestMessage(HttpMethod.Get, $"{Navigation.BaseUri}api/users");
                    requestMessage.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                    var response = await Http.SendAsync(requestMessage);
                    if (response.IsSuccessStatusCode)
                    {
                        allUsers = await response.Content.ReadFromJsonAsync<List<UserDto>>();
                        searchResults = allUsers;
                    }
                    else
                    {
                        Console.WriteLine("Unauthorized or Forbidden access.");
                    }
                }
            }
            StateHasChanged();
        }
    }

    private void SearchUserByEmail()
    {
        if(searchInput == "" || searchInput is null)
        {
            searchResults = allUsers;
            return;
        }
        searchResults = allUsers.Where(u => u.Email.Contains(searchInput)).ToList();
    }
}
