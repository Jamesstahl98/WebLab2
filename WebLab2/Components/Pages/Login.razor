@page "/login"
@using WebLab2.Components.Layout
@using WebLab2.HelperMethods
@using WebLab2.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red">@ErrorMessage</p>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div style="display: flex; flex-direction: column; gap: 1rem; max-width: 400px;">
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Username:</label>
            <InputText @bind-Value="loginModel.Username" style="flex: 1;" />
    </div>
        <div style="display: flex; align-items: center;">
            <label style="width: 120px;">Password:</label>
            <InputText @bind-Value="loginModel.Password" type="password" style="flex: 1;" />
    </div>
    <button type="submit">Login</button>
    </div>
</EditForm>

@code {
    [Inject] private AuthHelper AuthHelper { get; set; }
    private LoginDto loginModel = new();
    private string ErrorMessage = "";

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync($"{Navigation.BaseUri}api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var cookies = response.Headers.GetValues("Set-Cookie");

            foreach(var cookie in cookies)
            {
                if (cookie.StartsWith("AccessToken"))
                {
                    await JSRuntime.InvokeVoidAsync("setCookie", "AccessToken", ExtractTokenValue(cookie));
                }
                else if(cookie.StartsWith("RefreshToken"))
                {
                    await JSRuntime.InvokeVoidAsync("setCookie", "RefreshToken", ExtractTokenValue(cookie));
                }
            }
            AuthHelper.IsAuthenticated = true;
            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid credentials.";
        }
    }
    private string ExtractTokenValue(string cookie)
    {
        if (cookie != null)
        {
            var tokenValue = cookie.Split('=')[1];
            return tokenValue.Trim();
        }

        return null;
    }
}