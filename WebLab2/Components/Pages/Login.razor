@page "/login"
@using WebLab2.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red">@ErrorMessage</p>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div>
        <label>Username:</label>
        <InputText @bind-Value="loginModel.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private UserDto loginModel = new();
    private string ErrorMessage = "";

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync($"{Navigation.BaseUri}api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var cookies = response.Headers.GetValues("Set-Cookie");

            var accessTokenCookie = cookies.FirstOrDefault(c => c.Contains("AccessToken"));

            var refreshTokenCookie = cookies.FirstOrDefault(c => c.Contains("RefreshToken"));
            
            var accessToken = ExtractTokenValue(accessTokenCookie);
            var refreshToken = ExtractTokenValue(refreshTokenCookie);

            if (!string.IsNullOrEmpty(accessTokenCookie))
            {
                await JSRuntime.InvokeVoidAsync("setCookie", "AccessToken", accessToken);
            }

            if (!string.IsNullOrEmpty(refreshTokenCookie))
            {
                await JSRuntime.InvokeVoidAsync("setCookie", "RefreshToken", refreshToken);
            }

            Navigation.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid credentials.";
        }
    }
    private string ExtractTokenValue(string cookie)
    {
        if (string.IsNullOrEmpty(cookie))
            return null;

        var parts = cookie.Split(';');
        var tokenPart = parts.FirstOrDefault(c => c.Contains("AccessToken"));

        if (tokenPart != null)
        {
            var tokenValue = tokenPart.Split('=')[1];
            return tokenValue.Trim();
        }

        return null;
    }
}